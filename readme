# VNR OutPass Application

A full-stack Gate Pass Management System for VNRVJIET. Supports role-based access (Student, Mentor, HOD, Security), Google OAuth, QR-based validation, and secure backend using PostgreSQL with Prisma.

---

## 🛠️ Tech Stack

- **Frontend:** React + Vite + TypeScript
- **Backend:** Express.js + TypeScript + Prisma
- **Database:** PostgreSQL (hosted via NeonDB)
- **Auth:** Google OAuth2 + JWT + HttpOnly Cookies

---

## 🚀 Setup Instructions

### 1. Clone & Install
```bash
git clone https://github.com/Joey-alwyn/vnr-outpass.git
cd vnr-outpass


### 2. Install Dependencies

cd backend
npm install

cd ../frontend
npm install


### 3. Set Up Environment Variables

Create a `.env` file in `backend/`:
and in 'frontend/'
```

### 4. Setup Prisma & Database
Migrate & Seed


cd backend
npx prisma migrate dev --name init
npx prisma generate
npx ts-node src/scripts/seed.ts
✅ This seeds initial users + mentor mappings.
>added seed script to json so - 'npm run seed' should be enough instead of the last command

🔄 How to Add New Mentor/Student Mappings
Update src/scripts/seed.ts with only the new users and mappings like this:


// Add new users only
await prisma.user.createMany({
  data: [ ...newUsers ],
  skipDuplicates: true,
});

// Find users by email and map
const mentor = await prisma.user.findUnique({ where: { email: 'mentor@example.com' } });
const student = await prisma.user.findUnique({ where: { email: 'student@example.com' } });

await prisma.studentMentor.create({
  data: {
    studentId: student.id,
    mentorId: mentor.id
  }
});
✔️ Re-run: 
npx ts-node src/scripts/seed.ts
>added seed script to json so - 'npm run seed' should be enough instead of the last command

> ⚠️ Re-run `npx prisma generate` if schema changes
⚠️ Important Notes
You only need to run 'migrate dev' once per migration.
If you're not sure — run 'npx prisma migrate status' to check if you're behind.
Always follow it up with:
npx prisma generate

### 5. Start the App

```bash
# Backend
cd backend
npm run dev

# Frontend
cd frontend
npm run dev
```

Visit: `http://localhost:5173`

---

## 🧪 Testing APIs (using REST Client)

Use `test.http` file in the root to:

* Login via `idToken`
* Apply for Gate Pass
* View Mentor Requests
* Approve/Reject Pass
* Security scan & verify

---

## 📁 Important Files Overview

```
vnr-outpass/
├── backend/
│   ├── src/
│   │   ├── index.ts               # Entry point
│   │   ├── config.ts              # ENV config
│   │   ├── auth.ts                # JWT & Google auth
│   │   ├── middlewares/
│   │   │   └── auth.middleware.ts # isAuthenticated, requireRole
│   │   ├── controllers/
│   │   │   ├── student.controller.ts
│   │   │   ├── mentor.controller.ts
│   │   │   ├── security.controller.ts
│   │   ├── routes/                # Role-wise API routes
│   │   ├── utils/qr.util.ts       # QR generation/token logic
│   ├── prisma/
│   │   └── schema.prisma          # DB schema
│   ├── test.http                  # Manual API tests
│   └── package.json
│
├── frontend/
│   ├── src/
│   │   ├── App.tsx                # Role-based UI routing
│   │   ├── components/            # Login, Layout, Forms
│   │   ├── pages/                 # GatePassForm, MentorRequests, SecurityScan
│   ├── vite.config.ts
│   └── package.json

```
## Completed Features
Google login (SSO)

Role-based session handling

Student: Apply gate pass

Mentor: Approve/Reject requests

QR token generation on approval

Reusable test.http for API testing

## 🔜 Pending To-Do

| Task                                                         | Status         |
| ------------------------------------------------------------ | -------------- |
| Security QR scan interface + logic                           | ⏳ In Progress |
| Mark QR code as invalid after scan                           | ❌ Not done yet |
| Notify mentor when student applies (email/WhatsApp optional) | ❌ Pending      |
| HOD escalation flow (optional)                               | ❌ Pending      |
| Prevent QR reuse at gate                                     | ❌ Pending      |
| Fully dynamic CSV import for student–mentor mapping          | 🔜 Future      |
| Better error feedback on role issues                         | 🔜 Future      |


## 👥 Seeded Accounts

| Role     | Email                    | Notes         |
| -------- | ------------------------ | ------------- |
| Mentor   | [aveenonights@gmail.com] | Sample Mentor |
| Student  | [22071a0508@vnrvjiet.in] | Sample User   |
| Student  | [22071a0504@vnrvjiet.in] | Sample User   |
| Student  | [22071a0555@vnrvjiet.in] | Sample User   |
| Security | [guard@vnrsecurity.com]  | Gate Scanner  |

---

good luck lamavo if u are reading this